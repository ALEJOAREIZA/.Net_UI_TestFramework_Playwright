pool:
  name: VMSS-PROD-WinFarm
  
variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  nugetVersion: ''

stages:

  - stage: prepareNuGetPackagesStage
    displayName: Prepare NuGet Packages
    jobs:

    - job: prepareNuGetPackages
      displayName: Prepare NuGet Packages
      steps:

      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: 'restore'
          projects: '$(solution)'
          feedsToUse: 'config'
          nugetConfigPath: 'NuGet.config'

      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: 'build'
          projects: '$(solution)'
          arguments: '--no-restore --configuration $(BuildConfiguration)'

      - task: PowerShell@2
        displayName: Set NuGet Version
        inputs:
          targetType: 'inline'
          script: |
            $buildNumberParts = "$(Build.BuildNumber)".Split(".")
            $dailyBuildNumber = "{0:D2}" -f [int]$buildNumberParts[1]
            $buildNumber = $buildNumberParts[0]+$dailyBuildNumber
            $combinedVersion = "${env:MAJORVERSION}.${env:MINORVERSION}.$buildNumber"
            Write-Host "Nuget version will be set to following"
            Write-Host "$combinedVersion"
            Write-Host "##vso[task.setvariable variable=nugetVersion]$combinedVersion"

      - task: PowerShell@2
        displayName: Update NuSpec files
        inputs:
          targetType: 'inline'
          script: |
            Get-ChildItem -Path ".\" -Filter *.nuspec -Recurse | ForEach-Object {
              $pathToFile = $_.FullName
              $modifiedFileContent = (Get-Content -path $pathToFile -Raw) -replace "#VERSION", "$(nugetVersion)"
              Set-Content -Path $pathToFile -Value $modifiedFileContent -Encoding UTF8
            }

      - task: DotNetCoreCLI@2
        displayName: Create NuGet Packages
        inputs:
          command: 'pack'
          packagesToPack: '**/*.csproj'
          versioningScheme: 'byEnvVar'
          versionEnvVar: 'nugetVersion'

      - task: PowerShell@2
        displayName: Empty Pipeline Folder
        inputs:
          targetType: 'inline'
          script: |
            if (Test-Path -Path '$(Pipeline.Workspace)\slinkNugetPackages') {
              Remove-Item '$(Pipeline.Workspace)\slinkNugetPackages\*' -Recurse -Force
            }

      - task: PublishPipelineArtifact@1
        displayName: Publish Pipeline Artifacts
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifact: 'slinkNugetPackages'
          publishLocation: 'pipeline'

      - task: PowerShell@2
        displayName: Debug
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Definitin name: $(Build.DefinitionName)"
            Write-Host "Build number: $(Build.BuildNumber)"
            Write-Host "The following packages will be pushed to Artifactory:"
            $list = Get-ChildItem -Path '$(Build.ArtifactStagingDirectory)'
            write-host "$list"    


  - stage: deployNuGetPackagesToArtifactoryStage
    displayName: Deploy NuGet Packages to Artifactory
    dependsOn: prepareNuGetPackagesStage
    condition: and(succeeded(),or(eq(variables['Build.SourceBranch'], 'refs/heads/main'),eq(variables['ForceDeploy'], 'true')))
    jobs:
    
    - deployment: deployNuGetPackagesToArtifactory
      displayName: Deploy NuGet Packages to Artifactory
      environment: 'SL_Artifactory'
      strategy:
        runOnce:
          deploy:
            steps:

            - task: PowerShell@2
              displayName: Debug
              inputs:
                targetType: 'inline'
                script: |
                  Write-Host "Pipelin workspace: $(Pipeline.Workspace)"
                  Write-Host "Packages found in pipeline workspace:"
                  $list = Get-ChildItem -Path '$(Pipeline.Workspace)\slinkNugetPackages'
                  write-host "$list"

            - task: ArtifactoryToolsInstaller@1
              displayName: 'Jfrog Tool Installer'
              inputs:
                artifactoryService: 'Schroders - Artifactory - PRD'
                cliInstallationRepo: 'gen-jfrogcli-remote'

            - task: ArtifactoryNuGet@2
              displayName: Push Packages to Artifactory
              inputs:
                command: 'push'
                artifactoryService: 'Schroders - Artifactory - PRD'
                targetDeployRepo: '$(TargetRepo)'
                pathToNupkg: '$(Pipeline.Workspace)\slinkNugetPackages\*.nupkg'
                collectBuildInfo: true
                buildName: '$(Build.DefinitionName)'
                buildNumber: '$(Build.BuildNumber)'

            - task: ArtifactoryPublishBuildInfo@1
              displayName: Update Build Info in Artifactory
              inputs:
                artifactoryService: 'Schroders - Artifactory - PRD'
                buildName: '$(Build.DefinitionName)'
                buildNumber: '$(Build.BuildNumber)'
